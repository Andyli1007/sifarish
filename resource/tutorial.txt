This tutorial is for social recommendation base on collaborative filtering. Processing 
is done with a  pipeline of MR jobs. Some of them are optional. All commands are in the 
shell script brec.sh. Please make necessary changes for path, environment etc in that file 
before  proceeding


Dependency Jars
===============
Please refer to resource/jar_dpendency.txt


Generating Rating data (optional)
================================
You could generate rating data directly, by following the steps here.
The format of rating is as follows. Each line has rating by all users for a given item

item1,user1:3,user2:4,..
item2,user2:5,user4:2,...

You can use ratings.rb as follows to generate ratings data and save it ia file
It requires util.rb to be in the ../lib directory. You can get util.rb
from the visitante project at the following location
https://github.com/pranab/visitante/tree/master/script/ruby

ruby ratings.rb <item_count> <user_count> <user_per_items_multipler>  > <rating_file>

In the output, average number of users rating for an item will be 
item_count *  user_per_items_multipler / user_count

So choose the last argument as per your need.

User count should be an order of magnitude higher than item count. The value of
user_per_items_multipler should be 5 or more. A reasoable value is 10

Copy rating data to HDFS
hadoop fs -rmr $HDFS_BASE_DIR/rate/*
hadoop fs -put <rating_file> $HDFS_BASE_DIR/rate


Implicit Rating Predictor (optiuonal)
=====================================
This MR task is optional. You want to run this MR if you want to generate rating data
from user engaement click stream data. If you have generated rating data directly from script
then skip this.

1.Export user engaement schema to HDFS
./brec.sh expSchema

2.Generate user engagement data as follows
./brec.sh genHistEvent <item_count> <user_count> <average_event_count_per_user>
average_event_count_per_user = number of events per customer (a reasonable number is around 10)

3.Copy the input data file to  HDFS input directory. This is the script to run MR
./brec.sh expEvent

4. Run MR
./brec.sh genRating


Rating data formatter (optional)
================================
If you ran ImplicitRatingPredictor, it generated rating data in an exploded format as below
userID, itemID, rating
However, Rating Correlation MR below expects data in a compact format as below
itemID, userID1:rating1, userId2:rating2

This map reduce is necessary to do the format conversion to the compact form and it can be run as follows
./brech.sh compactRating


Rating Statistics (optional)
============================
If the parameter input.rating.stdDev.weighted.average is set to true for UtilityAggregator,
then rating std dev calculation is necessary. In our example, we are not using it.

run this to calculate rating statistics
./brec.sh ratingStat


Rating correlation
==================
Correlation can be calculated in various ways. We will be using cosine similarity.

Here is shell script to calculate correlation. 
./brec.sh correlation

Rating Predictor
================
The next step is to predict rating based on items already rated by user and the correlation
calculated in the first MR

1.The rating file should be renamed so that it has the same prefix  have the prefix as defined by 
the config param rating.file.prefix (prRating here)
./brec.sh renameRatingFile part-r-00000 prRating.txt 

2. Run MR as follows
./brec.sh ratingPred

Aggregate Rating Predictor
==========================
This predicts the final rating by aggregating contribution from all items rated by the user

Run MR
./brec.sh ratingAggr

Business Goal Injection (optional)
==================================
This is an optional MR, that combines scores of various business goals with recommendation score
using relative weighting to come up with the final score. In our example, we are not using it.

1. Copy business score data
./brec.sh expBizData

2. Run MR
./brec.sh injectBizGoal


Order by User ID (optional)
===========================
It orders the final result by userID, so that you get all recommendation for
a given user together

Here is the sample shell script. It's input is the output of the previous MR 

JAR_NAME=/home/pranab/Projects/chombo/target/chombo-1.0.jar
CLASS_NAME=org.chombo.mr.TextSorter

hadoop fs -rmr /user/pranab/reco/bigo/_logs
hadoop fs -rmr /user/pranab/reco/bigo/_SUCCESS

echo "running TextSorter mr"
IN_PATH=/user/pranab/reco/bigo
OUT_PATH=/user/pranab/reco/usso
echo "input $IN_PATH output $OUT_PATH"
hadoop fs -rmr $OUT_PATH
echo "removed output dir $OUT_PATH"
hadoop jar $JAR_NAME  $CLASS_NAME -Dconf.path=/home/pranab/Projects/bin/sifarish/reco.properties  $IN_PATH  $OUT_PATH

Novelty per user (optional)
===========================
Nobelty can blended in with predicted rating as follows

1. Caculate user item engaement distribution
./brec.sh genEngageDistr

2. Generate item novelty score
./brec.sh genItemNovelty

3. Rename predicted rating file to have prefix as defined in config. It should be repeated
if there are multiple reducer output files
./brec.sh renamePredRatingFile  part-r-00000 prRatings0.txt

4. Join predicted rating and novelty
./brec.sh joinRatingNovelty

5. Weighted average of predicted rating and novelty
./brec.sh injectItemNovelty

Item popularity global
======================
It can be used to solve cold start problem. Popularity is calculated by taking weighted 
average of various rating stats

Run MR
./brec.sh itemPopularity

Configuration
=============
it's in reco.properties

 
